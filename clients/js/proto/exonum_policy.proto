syntax = "proto3";

package exonum.exonum_policy;

import "./exonum/crypto/types.proto";
import "google/protobuf/timestamp.proto";

//
// Data models.
//

// Policy `Target` struct.
message Target {
	string name = 1;
	string desc = 2;
	map<string, RuleNode> rule_nodes = 3;
	string entry_point = 4;
}
// Policy `RuleNode` struct.
message RuleNode {
	string target_name = 1;
	string rule_name = 2;
	uint32 node_index = 3;
	repeated string successors = 4;
}
// Policy `Rule` struct.
message Rule {
	string name = 1;
	string condition = 2;
	string effect = 3;
	string desc = 4;
}
// Rule cursor type.
enum CursorType {
	First = 0;
	Append = 1;
	Insert = 2;
	Last = 3;
}

//
// Service transactions.
//

// Create the new target.
message TxCreateTarget {
	string target_name = 1;
	string target_desc = 2;
	uint64 seed = 3;
}
// Remove the target.
message TxRemoveTarget {
	string target_name = 1;
	uint64 seed = 2;
}
// Create the new rule.
message TxCreateRule {
	string rule_target_name = 1;
	string rule_name = 2;
	string rule_condition = 3;
	string rule_effect = 4;
	string rule_desc = 5;
	uint64 seed = 6;
}
// Remove the rule.
message TxRemoveRule {
	string rule_target_name = 1;
	string rule_name = 2;
	uint64 seed = 3;
}
// Change policy enabled flag.
message TxSetPolicyEnabledByUser {
	bool policy_enabled = 1;
	uint64 seed = 2;
}
// Create rule node.
message TxCreateNode {
	string rule_target_name = 1;
	string rule_name = 2;
	string cursor_target_name = 3;
	string cursor_node_name = 4;
	CursorType cursor_type = 5;
	uint64 seed = 6;
}

//
// Structures used in Interface communication.
//

// Policy configuration.
message Config {
	// Policy enabled flag.
	bool is_enabled = 1;
}

// Policy configuration.
message PolicyConfig {
	// Policy targets to append.
	map <string, string> new_targets = 1;
	// PIP Value coord for cache.
	PolicyPipValueCoord cache_value_coord = 2;
	// PIP Value to be cached.
	string cache_value = 3;
}

// Policy PIP Value configuration.
message PolicyPipValueConfig {
	// Policy instance id.
	uint32 policy_instance_id = 1;
	// PIP Value coord for cache.
	PolicyPipValueCoord value_coord = 2;
}

// Policy PIP value coordinates.
message PolicyPipValueCoord {
	// Requested value path inside PIP of the target service.
	string path = 1;
	// Requested value family (in case of group or family index).
	string family = 2;
	// Requested value key (inside index).
	string key = 3;
	// Requested field from the value.
	string field = 4;
}
